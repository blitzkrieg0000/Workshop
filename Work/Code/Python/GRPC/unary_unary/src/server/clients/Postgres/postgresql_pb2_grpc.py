# Generated by the Services Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clients.Postgres.postgresql_pb2 as postgresql__pb2


class postgresqlStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.executeSelectQuery = channel.unary_unary(
                '/producer.postgresql/executeSelectQuery',
                request_serializer=postgresql__pb2.executeSelectQueryRequest.SerializeToString,
                response_deserializer=postgresql__pb2.executeSelectQueryResponse.FromString,
                )
        self.executeInsertQuery = channel.unary_unary(
                '/producer.postgresql/executeInsertQuery',
                request_serializer=postgresql__pb2.executeInsertQueryRequest.SerializeToString,
                response_deserializer=postgresql__pb2.executeInsertQueryResponse.FromString,
                )
        self.connect2DB = channel.unary_unary(
                '/producer.postgresql/connect2DB',
                request_serializer=postgresql__pb2.connect2DBRequest.SerializeToString,
                response_deserializer=postgresql__pb2.connect2DBResponse.FromString,
                )
        self.disconnectDB = channel.unary_unary(
                '/producer.postgresql/disconnectDB',
                request_serializer=postgresql__pb2.disconnectDBRequest.SerializeToString,
                response_deserializer=postgresql__pb2.disconnectDBResponse.FromString,
                )


class postgresqlServicer(object):
    """Service
    """

    def executeSelectQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def executeInsertQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connect2DB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnectDB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_postgresqlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'executeSelectQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.executeSelectQuery,
                    request_deserializer=postgresql__pb2.executeSelectQueryRequest.FromString,
                    response_serializer=postgresql__pb2.executeSelectQueryResponse.SerializeToString,
            ),
            'executeInsertQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.executeInsertQuery,
                    request_deserializer=postgresql__pb2.executeInsertQueryRequest.FromString,
                    response_serializer=postgresql__pb2.executeInsertQueryResponse.SerializeToString,
            ),
            'connect2DB': grpc.unary_unary_rpc_method_handler(
                    servicer.connect2DB,
                    request_deserializer=postgresql__pb2.connect2DBRequest.FromString,
                    response_serializer=postgresql__pb2.connect2DBResponse.SerializeToString,
            ),
            'disconnectDB': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnectDB,
                    request_deserializer=postgresql__pb2.disconnectDBRequest.FromString,
                    response_serializer=postgresql__pb2.disconnectDBResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'producer.postgresql', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class postgresql(object):
    """Service
    """

    @staticmethod
    def executeSelectQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.postgresql/executeSelectQuery',
            postgresql__pb2.executeSelectQueryRequest.SerializeToString,
            postgresql__pb2.executeSelectQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def executeInsertQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.postgresql/executeInsertQuery',
            postgresql__pb2.executeInsertQueryRequest.SerializeToString,
            postgresql__pb2.executeInsertQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connect2DB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.postgresql/connect2DB',
            postgresql__pb2.connect2DBRequest.SerializeToString,
            postgresql__pb2.connect2DBResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnectDB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.postgresql/disconnectDB',
            postgresql__pb2.disconnectDBRequest.SerializeToString,
            postgresql__pb2.disconnectDBResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
