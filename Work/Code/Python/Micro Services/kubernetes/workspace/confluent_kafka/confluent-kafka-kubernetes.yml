apiVersion: v1
kind: Service
metadata:
  name: zookeeperpool
spec:
  clusterIP: None
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: brokerpool
spec:
  clusterIP: None
  selector:
    app: broker
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: schemapool
spec:
  clusterIP: None
  selector:
    app: schemaregistry
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: restproxypool
spec:
  clusterIP: None
  selector:
    app: restproxy
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: kafkaconnectpool
spec:
  clusterIP: None
  selector:
    app: kafkaconnect
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: ksqldbserverpool
spec:
  clusterIP: None
  selector:
    app: ksqldbserver
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 8088
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeperdeployment
  labels:
    team: development
spec:
  serviceName: zookeeperpool
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.1.1
        ports:
          - containerPort: 2181
        envFrom:
        - configMapRef:
            name: zookeeperenv
        volumeMounts:
        - name: zookeeperdataclaim
          mountPath: /var/lib/zookeeper/data
          subPath: zookeeper.data
        - name: zookeeperdataclaim
          mountPath: /var/lib/zookeeper/log
          subPath: zookeeper.log
  volumeClaimTemplates:
  - metadata:
      name: zookeeperdataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: brokerdeployment
  labels:
    team: development
spec:
  serviceName: brokerpool
  replicas: 1
  selector:
    matchLabels:
      app: broker
  template:
    metadata:
      labels:
        app: broker
    spec:
      containers:
      - name: broker
        image: confluentinc/cp-kafka:7.1.1
        ports:
          - containerPort: 9092
          - containerPort: 9101
        envFrom:
        - configMapRef:
            name: brokerenv
        volumeMounts:
        - name: brokerdataclaim
          mountPath: /var/lib/kafka/data
          subPath: broker.data
  volumeClaimTemplates:
  - metadata:
      name: brokerdataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 2Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: schemaregistrydeployment
  labels:
    team: development
spec:
  serviceName: schemapool
  replicas: 1
  selector:
    matchLabels:
      app: schemaregistry
  template:
    metadata:
      labels:
        app: schemaregistry
    spec:
      containers:
      - name: schemaregistry
        image: confluentinc/cp-schema-registry:7.1.1
        ports:
          - containerPort: 8081
        envFrom:
        - configMapRef:
            name: schemaregistryenv
        volumeMounts:
        - name: schemadataclaim
          mountPath: /data
          subPath: schemaregistry.data
  volumeClaimTemplates:
  - metadata:
      name: schemadataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: restproxydeployment
  labels:
    team: development
spec:
  serviceName: schemapool
  replicas: 1
  selector:
    matchLabels:
      app: restproxy
  template:
    metadata:
      labels:
        app: restproxy
    spec:
      containers:
      - name: restproxy
        image: confluentinc/cp-kafka-rest:7.1.1
        ports:
          - containerPort: 8082
        envFrom:
        - configMapRef:
            name: restproxyenv
        volumeMounts:
        - name: restproxydataclaim
          mountPath: /data
          subPath: restproxy.data
  volumeClaimTemplates:
  - metadata:
      name: restproxydataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafkaconnectdeployment
  labels:
    team: development
spec:
  serviceName: kafkaconnectpool
  replicas: 1
  selector:
    matchLabels:
      app: kafkaconnect
  template:
    metadata:
      labels:
        app: kafkaconnect
    spec:
      containers:
      - name: kafkaconnect
        image: confluentinc/cp-kafka-connect:7.1.1
        ports:
          - containerPort: 8083
        envFrom:
        - configMapRef:
            name: kafkaconnectenv
        volumeMounts:
        - name: kafkaconnectdataclaim
          mountPath: /data
          subPath: kafkaconnect.data
  volumeClaimTemplates:
  - metadata:
      name: kafkaconnectdataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ksqldbserverdeployment
  labels:
    team: development
spec:
  serviceName: schemapool
  replicas: 1
  selector:
    matchLabels:
      app: ksqldbserver
  template:
    metadata:
      labels:
        app: ksqldbserver
    spec:
      containers:
      - name: ksqldbserver
        image: confluentinc/cp-ksqldb-server:7.1.1
        ports:
          - containerPort: 8088
        envFrom:
        - configMapRef:
            name: ksqldbserverenv
        volumeMounts:
        - name: ksqldbserverdataclaim
          mountPath: /data
          subPath: ksqldbserver.data
  volumeClaimTemplates:
  - metadata:
      name: ksqldbserverdataclaim
    spec:
      accessModes: ["ReadWriteMany"]
      storageClassName: nfs-client
      resources:
        requests:
          storage: 1Gi